#!/usr/bin/env node
/**
 * Ripple Lib Set up
 */
const RippleAPI = require('ripple-lib').RippleAPI
const address = process.env.XRP_WALLET_ADDRESS
const secret = process.env.XRP_WALLET_SECRET

const api = new RippleAPI({server: 'wss://s.altnet.rippletest.net:51233'})
// CHange to wss://s1.ripple.com:443 for production
const WebSocket = require('ws')



let txObj = {
  signers: {
    threshold: 3,
    weights: [
      {
        address: "rato1hAeQjm3FDRZ3J1vygZM3Y435wsGgw",
        weight: 1
      },
      {
        address: "rKL8nYYZmNXkKoT2tCJCnAAnuwQkKGPTur",
        weight: 1
      }
    ]
  }
}

const txObj2 = {
  disableMasterKey: true
}

function delay(t, v) {
  return new Promise(function(resolve) { 
      setTimeout(resolve.bind(null, v), t)
  });
}
const hostList = process.env.CODIUS_HOSTS.split(',')
const memo = new Map()
let receivedAddresses = 0
console.log('hostList', hostList)
hostList.forEach(hostURL => {
  memo.set(hostURL, {
    ws: new WebSocket(hostURL),
    receivedAddress: false
  })
  const host = memo.get(hostURL)
  const ws = host.ws
  ws.on('open', () => {
    ws.send(JSON.stringify({
      "keyGenInitiate": true
    }))
  })
  ws.on('message', (data) => {
    // Receive public addresses.
    data = JSON.parse(data)
    console.log(data.address, data.walletAddress, host.receivedAddress)
    if (data.address && data.walletAddress) {
      host.address = data.address
      if (!host.receivedAddress) {
        receivedAddresses += 1
      }
      host.receivedAddress = true
      txObj.signers.weights.push({
        address: host.address,
        weight: 1
      })
      if (receivedAddresses === hostList.length) {
        // Created signed transmission for txJSON
        api.connect().then(() => {
          return api.prepareSettings(address, txObj)
        })
        .then(prepareResult => {
          const {signedTransaction} = api.sign(prepareResult.txJSON, secret)
          return api.submit(signedTransaction)
        })
        .then(submittedResult => {
          if (submittedResult.resultCode === 'tesSUCCESS') {
            // Check accountObject
            return delay(7000).then(() => {
              return api.getAccountObjects(address)
            })
          } else {
            throw new Error(err)
          }
        })
        .then(multiSignVerify => {
          if (multiSignVerify.account_objects[0].SignerQuorum === 3) {
            // the 3 should be hostList.length
            return api.prepareSettings(address, txObj2)

          } else {
            throw new Error('Multi sign not set up!')
          }
        })
        .then(disableKeySettings => {
          const {signedTransaction} = api.sign(disableKeySettings.txJSON, secret)
          return api.submit(signedTransaction)
        })
        .then(disableKeySubmittedResult => {
          if (disableKeySubmittedResult.resultCode === 'tesSUCCESS') {
            // Send back the public address as well as host list to one host which will propagate
            const newHostList = hostList.filter(changedHost => {
              return changedHost !== hostURL
            })
            const replyObj = {
              "address": address,
              "hostList": newHostList,
              "sendVerifiedSharedWallet": true
            }
            ws.send(JSON.stringify(replyObj))
          } else {
            throw new Error('Error submitting master key disabling transaction')
          }
        })
        .catch(err => {
          console.log(err)
        })
      }
    }
  })
})



// Sign and submit
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('xrpkeygen:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}