#!/usr/bin/env node
/**
 * Ripple Lib Set up
 */
const RippleAPI = require('ripple-lib').RippleAPI
const address = process.env.XRP_WALLET_ADDRESS
const secret = process.env.XRP_WALLET_SECRET

const api = new RippleAPI({server: 'wss://s1/ripple.com:443'})
const WebSocket = require('ws')


let txJSON = {
  "Flags": 0,
  "TransactionType": "SignerListSet",
  "Account": process.env.XRP_WALLET_ADDRESS,
  "Fee": '10000',
  "SignerQuorum": 4,
  "SignerEntries": []
}

//ping end point. Then Only sign if all public keys are returned.
// Once they are all there, JSONstringify and then api.sign(txJSON, process.env.XRP_WALLET_SECRET)

const txJSON2 = {
  "TransactionType": "AccountSet",
  "Account" : process.env.XRP_WALLET_ADDRESS,
  "Fee": "0",
  "SetFlag": 4
}

const hostList = process.env.CODIUS_HOSTS.split(',')
const memo = new Map()
const receivedAddresses = 0
hostList.forEach(host => {
  memo.set(host, {
    ws: new WebSocket(host),
    receivedAddress: false
  })
  host = memo.get(host)
  const ws = host.ws
  ws.on('open', () => {
    ws.send('keyGen Initiate')
  })
  ws.on('message', (data) => {
    // Receive public addresses.
    if (data.address && walletAddress && !host.receivedAddress) {
      host.address = data.address
      receivedAddresses += 1
      host.receivedAddress = true
      txJSON.SignerEntries.push({
        "SignerEntry": {
          "Account": data.address,
          "SignerWeight": 1
        }
      })
      if (receivedAddresses === hostList.length) {
        // Created signed transmission for txJSON
        txJSON = JSON.stringify(txJSON)
        api.connect().then(() => {
          return api.sign(txJSON, secret)
        })
        .then(result => {
          console.log('result 1', result)
          return api.submit(result.signedTransaction)
        })
        .catch(err => {
          throw new Error('Error signing multi-sign account')
        })
        .then(submittedResult => {
          if (submittedResult.resultCode === 'tesSUCCESS') {
            // Disable keys
            return api.sign(txJSON2, secret)
          } else {
            throw new Error('Error submitting multi-sign account')
          }
        })
        .then(disableKeySign => {
          console.log('result 2', disableKeySign)
          return api.submit(disableKeySign.signedTransaction)
        })
        .catch(err => {
          throw new Error('Error signing master key disabling transaction')
        })
        .then(disableKeySubmittedResult => {
          console.log('result 3', disableKeySubmittedResult)
          if (disableKeySubmittedResult.resultCode === 'tesSuccess') {
            console.log("SUCCESS CREATING ACCOUNT")
            // Send back to each host.
          } else {
            throw new Error('Error submitting master key disabling transaction')
          }
        })
      }
    }
  })
})



// Sign and submit
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('xrpkeygen:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
