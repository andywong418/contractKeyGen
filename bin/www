#!/usr/bin/env node
/**
 * Ripple Lib Set up
 */
const RippleAPI = require('ripple-lib')
const address = process.env.XRP_WALLET_ADDRESS
const secret = process.env.XRP_WALLET_SECRET

const api = new RippleAPI({server: 'wss://s1/ripple.com:443'})
const WebSocket = require('ws')
const wss = new WebSocket.Server({ port: 8080 })


const txJSON = {
  "Flags": 0,
  "TransactionType": "SignerListSet",
  "Account": process.env.XRP_WALLET_ADDRESS,
  "Fee": '10000',
  "SignerQuorum": 4,
  "SignerEntries": []
}

wss.on('connection', function connection(ws) {
  ws.on('message', function incoming(message) {
    console.log('received: %s', message)
  })
})

//ping end point. Then Only sign if all public keys are returned.
// Once they are all there, JSONstringify and then api.sign(txJSON, process.env.XRP_WALLET_SECRET)

const txJSON2 = {
  "TransactionType": "AccountSet",
  "Account" : process.env.XRP_WALLET_ADDRESS,
  "Fee": "0",
  "SetFlag": 4
}

// Sign and submit
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('xrpkeygen:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
